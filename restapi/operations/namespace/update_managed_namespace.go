// Code generated by go-swagger; DO NOT EDIT.

package namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateManagedNamespaceHandlerFunc turns a function with the right signature into a update managed namespace handler
type UpdateManagedNamespaceHandlerFunc func(UpdateManagedNamespaceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateManagedNamespaceHandlerFunc) Handle(params UpdateManagedNamespaceParams) middleware.Responder {
	return fn(params)
}

// UpdateManagedNamespaceHandler interface for that can handle valid update managed namespace params
type UpdateManagedNamespaceHandler interface {
	Handle(UpdateManagedNamespaceParams) middleware.Responder
}

// NewUpdateManagedNamespace creates a new http.Handler for the update managed namespace operation
func NewUpdateManagedNamespace(ctx *middleware.Context, handler UpdateManagedNamespaceHandler) *UpdateManagedNamespace {
	return &UpdateManagedNamespace{Context: ctx, Handler: handler}
}

/*UpdateManagedNamespace swagger:route POST /{clustername}/namespace/{customer}/{name} namespace updateManagedNamespace

UpdateManagedNamespace update managed namespace API

*/
type UpdateManagedNamespace struct {
	Context *middleware.Context
	Handler UpdateManagedNamespaceHandler
}

func (o *UpdateManagedNamespace) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateManagedNamespaceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
